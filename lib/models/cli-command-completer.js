'use strict';

var fs          = require('fs');
var find        = require('lodash/collection/find');
var omelette    = require('omelette');
var Generator   = require('./cli-command-generator');

/**
  CliCommandCompleter is responsible for shell completion for partially
  typed - and shell suggestion for fully typed cli commands.

  @class CliCommandCompleter
  @extends CoreObject
  @constructor
*/

function CliCommandCompleter() {

  this.completion = omelette('ember');
  this.template = this.loadTemplate('/node_modules/ember-cli/cli-commands.json');

}

/**
  Receives a relative path to the cli command cache file and returns its
  content. If no cache file exists it will fallback to generate the JSON
  on demand.

  @private
  @method loadTemplate
 */

CliCommandCompleter.prototype.loadTemplate = function(relPathToCache) {

  var pathToCache = process.cwd() + relPathToCache;

  if (fs.existsSync(pathToCache)) {

    var content = fs.readFileSync(pathToCache, 'utf8');
    return JSON.parse(content);

  } else {

    var generator = new Generator();
    return generator.generateJSON();

  }

};

/**
  Initializes omelette completion and calls `this.handleInput` every
  time a user hits `tab`.

  @private
  @method run
 */

CliCommandCompleter.prototype.run = function() {

  this.completion.on('complete', this.handleInput.bind(this)).init();

};

/**
  Generates an intent out of the user typed command line input and replies
  with the correct results.

  @private
  @method handleInput
  @param  {Number} fragment Fragment count (ignored)
  @param  {String} word Parent token (ignored)
  @param  {String} line Represents the command line input
 */

CliCommandCompleter.prototype.handleInput = function(fragment, word, line) {

  var intent = {
    arguments: this.getArgs(line),
    isPremature: this.isPremature(line),
    seeksOptions: this.seeksOptions(line)
  };

  this.completion.reply(this.getResult(intent));

};

/**
  Receives a string, representing the users command line input and turns
  it into an array of CLI commands.

  @private
  @method getArgs
  @param  {String} line Represents the command line input
  @return {Array}       CLI commands
 */

CliCommandCompleter.prototype.getArgs = function(line) {
  return line.split(/\s+/).filter(function(cmd) {
    return cmd !== '';
  });
};

/**
  Receives a string, representing the users command line input and returns
  `true` if the user is mid way typing a command, `false` otherwise.

  @private
  @method isPremature
  @param  {String} line Represents the command line input
  @return {Boolean}     Wether user is mid way typing a command
 */

CliCommandCompleter.prototype.isPremature = function(line) {
  return !line.match(/\s+$/);
};

/**
  Receives a string, representing the users command line input and returns
  `true` if the user tries to get suggestions for command options

  @private
  @method seeksOptions
  @param  {String} line Represents the command line input
  @return {Boolean}     Wether user asks for command options
 */

CliCommandCompleter.prototype.seeksOptions = function(line) {
  return !!line.match(/\s+-+[^\s]*$/);
};

/**
  Receives an intent and searches its `template` (generated by the
  `cli-command-generator`) for the cli command matching that intent,
  return `null` if none is found.

  @private
  @method getCommand
  @param  {Object}  intent Represents intent of user
  @return {Command}        Matching command. `null` otherwise.
 */

CliCommandCompleter.prototype.getCommand = function(intent) {
  var command = intent.arguments.reduce(function(parentCommand, term) {

    var command = this.findCommand(parentCommand.commands, term);

    if (!command) {
      return intent.isPremature ? parentCommand : {};
    }

    // remember options of parent command
    command.options = command.options.concat(parentCommand.options ||Â []);
    return command;

  }.bind(this), this.template );

  return command.name ? command : null;
};

/**
  Receives an array of commands and a search term. Returns the one command
  that matches the term either in name or by alias.

  @private
  @method findCommand
  @param  {Array}   commands List of commands to chose from.
  @param  {String}  term     Term to match for.
  @return {Command}          Matching command. `undefined` otherwise.
 */

CliCommandCompleter.prototype.findCommand = function(commands, term) {
  return find(commands, function(command) {
    var nameMatches = command.name === term;
    var aliasMatches = command.aliases.indexOf(term) > -1;
    return nameMatches || aliasMatches;
  });
};


/**
  Receives an intent and searches for its matching command. Returns an
  array of CLI suggestions based on `intent` and respective `command`.


  @private
  @method getResult
  @param  {Object}  intent Represents intent of user
  @return {Array}          List of commands suggested to the user.
 */

CliCommandCompleter.prototype.getResult = function(intent) {

  var command = this.getCommand(intent);

  if (!command) {
    return [];
  }

  if (intent.seeksOptions) {
    return command.options.map(function(option) {
      return '--' + option.name + (option.type === 'Boolean' ? '' : '=');
    });
  } else {
    return command.commands.map(function(command) {
      return command.name;
    });
  }

};

module.exports = CliCommandCompleter;
