'use strict';

var fs = require('fs');
var path = require('path');
var Writer = require('broccoli-writer');

function copyPreserveSync (src, dest) {
  var srcStats = fs.statSync(src);
  if (srcStats.isFile()) {
    var destDir = path.dirname(dest);
    var dirs = [];
    while (destDir && !fs.existsSync(destDir)) {
      dirs.unshift(destDir);
      destDir = path.dirname(destDir);
    }
    dirs.forEach(function (dir) {
      fs.mkdirSync(dir);
    });
    var content = fs.readFileSync(src);
    fs.writeFileSync(dest, content, { flag: 'wx' });
    fs.utimesSync(dest, srcStats.atime, srcStats.mtime);
  } else {
    throw new Error('Unexpected file type for ' + src);
  }
}

module.exports = SassCompiler;
SassCompiler.prototype = Object.create(Writer.prototype);
SassCompiler.prototype.constructor = SassCompiler;
function SassCompiler (sourceTrees, inputFile, outputFile, options) {
  if (!(this instanceof SassCompiler)) return new SassCompiler(sourceTrees, inputFile, outputFile, options);
  if (!Array.isArray(sourceTrees)) throw new Error('Expected array for first argument - did you mean [tree] instead of tree?');
  this.sourceTrees = sourceTrees;
  this.inputFile = inputFile;
  this.outputFile = outputFile;
}

SassCompiler.prototype.write = function (readTree, destDir) {
  var self = this;

  return readTree(this.sourceTrees[0]).then(function (srcDir) {
    copyPreserveSync(
      path.join(srcDir, self.inputFile),
      path.join(destDir, self.outputFile));
  });
};
